# - name: is patchwork already built?
#   command: docker inspect {{ i_name }}
#   ignore_errors: yes
#   register: pw_image_exists
- name: build patchwork image
  docker_image:
    buildargs:
      USERNAME: '{{ pw_image_username }}'
      GIT_URL: '{{ pw_image_git_url }}'
      GIT_BRANCH: '{{ pw_image_git_branch }}'
    path: '{{ role_path }}/files/'
    name: '{{ i_name }}'
    tag: latest
    state: 'present'
    force: '{{ pw_image_force_build  }}'
- name: obtain postgres image
  docker_image:
    name: '{{ db_image }}'
    tag: latest
- name: create directory to hold postgres' data
  file:
    path: '{{ db_data_path }}'
    state: directory
    mode: 0755
    owner: 26
  become: true
- name: run postgres
  docker_container:
    name: '{{ db_container }}'
    image: '{{ db_image }}'
    state: 'started'
    restart_policy: always
    env:
      POSTGRESQL_USER: '{{ db_user }}'
      POSTGRESQL_PASSWORD: '{{ db_password }}'
      POSTGRESQL_DATABASE: '{{ db_database_name }}'
    volumes:
      - '{{ db_data_path }}:/var/lib/pgsql/data:Z'
  register: db_cont_metadata
# - debug:
#     msg: '{{ db_cont_metadata }}'
- name: wait for postgres to accept connections
  wait_for:
    host: '{{ db_cont_metadata["ansible_facts"]["docker_container"]["NetworkSettings"]["IPAddress"] }}'
    port: 5432
    state: drained
    connect_timeout: 15
    timeout: 30
  register: postgres_running
  until: postgres_running | success
  retries: 10

- name: prepare volume list
  set_fact:
    container_volume_list:
    - '{{ prod_config_path }}:/opt/{{ pw_image_username }}/patchwork/settings/production.py'
- name: prepare env dict
  set_fact:
    container_env_dict:
      DATABASE_NAME: '{{ db_database_name }}'
      DATABASE_USER: '{{ db_user }}'
      DATABASE_PASSWORD: '{{ db_password }}'
      DATABASE_HOST: '{{ db_cont_metadata["ansible_facts"]["docker_container"]["NetworkSettings"]["IPAddress"] }}'
      DATABASE_PORT: '5432'
      DJANGO_SECRET_KEY: 'FIXME'  # utilize ansible vault

- name: append initial fixture to env vars
  set_fact:
    container_env_dict: '{{ container_env_dict | combine({"INITIAL_FIXTURE": initial_db_fixture | basename}) }}'
  when: initial_db_fixture != ""
- name: append initial fixture to list of volumes
  set_fact:
    container_volume_list: "{{ container_volume_list }} + [ '{{ initial_db_fixture }}:/opt/{{ pw_image_username }}/{{ initial_db_fixture | basename }}' ]"
  when: initial_db_fixture != ""

- name: populate the database
  docker_container:
    name: '{{ db_loader_container }}'
    image: '{{ i_name }}'
    state: 'started'
    env: "{{ container_env_dict }}"
    command: ./init_db.sh
    volumes: "{{ container_volume_list }}"

- name: we can finally run patchwork
  docker_container:
    name: '{{ c_name }}'
    image: '{{ i_name }}'
    state: 'started'
    env: "{{ container_env_dict }}"
    ports:
      - 8000:8000
    volumes: "{{ container_volume_list }}"
# TODO: smoke test web and database

- name: make sure the "fetch mailing list archive" script is executable
  file:
    mode: +x
    path: '{{ fetch_ml_script }}'
  when: fetch_ml_script != ""
- name: append initial fixture to list of volumes
  set_fact:
    container_volume_list: "{{ container_volume_list }} + [ '{{ fetch_ml_script }}:/opt/{{ pw_image_username }}/{{ fetch_ml_script | basename }}' ]"
  when: fetch_ml_script != ""

- name: container to fetch e-mail
  docker_container:
    name: '{{ email_fetcher_container }}'
    image: '{{ i_name }}'
    state: 'started'
    env: "{{ container_env_dict }}"
    command: '/opt/{{ pw_image_username}}/{{ fetch_ml_script | basename }}'
    volumes: "{{ container_volume_list }}"
  when: fetch_ml_script != ""
